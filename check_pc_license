#!/usr/bin/python

import argparse
import urllib
import json

SERVER = ''
KEY = ''
LICENSE = '/api/health/license'
PROTOCOL = 'http://'

description = "Check license details for Papercut."
epilog = """\nFor bug reports or feature requests or suggestions, please visit
            https://github.com/HBBisenieks/PapercutNagiosCommands"""

parser = argparse.ArgumentParser(description=description, epilog=epilog)
parser.add_argument('--host', '-H', type=str, help='Host address',
                    required=True)
parser.add_argument('--key', '-k', type=str, help='API authorization key',
                    required=True)
parser.add_argument('--secure', '-S', action='store_true',
                    help='Connect over HTTPS')
parser.add_argument('--debug', action='store_true', help="""Print raw JSON data
                    from API to diagnose problems in the Papercut environment.
                     Should not be used in production.""")
parser.add_argument('--check_type', '-t', choices=['v', 's', 'u'],
                    help="""License parameter to check: LICENSE vALID|sUPPORT
                     REMAINING|LICENSED uSERS""", required=True)
parser.add_argument('--warning_threshold', '-w', type=int, default=50,
                    help="""Warning threshold for remaining users or license
                     days""")
parser.add_argument('--critical_threshold', '-c', type=int, default=10,
                    help="""Critical threshold for remaining users or license
                     days""")

args = parser.parse_args()

SERVER = str(args.host)
KEY = args.key

if args.secure:
    PROTOCOL = 'https://'

url = PROTOCOL + SERVER + LICENSE + '?Authorization=' + KEY


def load(url):
    response = urllib.urlopen(url)
    data = json.loads(response.read())
    return data


def checkLicenseValid(data):
    exitCode = 0
    status = "OK"
    perfData = "License valid"
    if not data['valid']:
        exitCode = 2
        status = "CRITICAL"
        perfData = "Invalid License"
    return exitCode, status, perfData


def checkSupportRemaining(data, warning, critical):
    remaining = data['upgradeAssuranceRemainingDays']
    exitCode = 0
    status = 'OK'
    perfData = str(remaining) + " days of support remaining"
    if remaining < critical:
        exitCode = 2
        status = 'CRITICAL'
    elif remaining < warning:
        exitCode = 1
        status = 'WARNING'
    return exitCode, status, perfData


def checkRemainingUsers(data, warning, critical):
    remaining = data['users']['remaining']
    exitCode = 0
    status = 'OK'
    perfData = str(remaining) + " licensed users remaining"
    if remaining < critical:
        exitCode = 2
        status = 'CRITICAL'
    elif remaining < warning:
        exitCode = 1
        status = 'WARNING'
    return exitCode, status, perfData


licenseInfo = load(url)

if args.debug:
    print licenseInfo

if args.check_type == 'v':
    exitCode, status, perfData = checkLicenseValid(licenseInfo)
elif args.check_type == 's':
    exitCode, status, perfData = checkSupportRemaining(licenseInfo,
                                                       args.warning_threshold,
                                                       args.critical_threshold)
elif args.check_type == 'u':
    exitCode, status, perfData = checkRemainingUsers(licenseInfo,
                                                     args.warning_threshold,
                                                     args.critical_threshold)
else:
    exitCode = 3
    status = "UNKNOWN STATUS"
    perfData = ''

print status + "|" + perfData + "\n"

exit(exitCode)
